// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/internal/picker (interfaces: Interface)

// Package mock_picker is a generated GoMock package.
package mock_picker

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/qdm12/dns/pkg/provider"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DNSIP mocks base method.
func (m *MockInterface) DNSIP(arg0 provider.DNSServer, arg1 bool) net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSIP", arg0, arg1)
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// DNSIP indicates an expected call of DNSIP.
func (mr *MockInterfaceMockRecorder) DNSIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSIP", reflect.TypeOf((*MockInterface)(nil).DNSIP), arg0, arg1)
}

// DNSServer mocks base method.
func (m *MockInterface) DNSServer(arg0 []provider.DNSServer) provider.DNSServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSServer", arg0)
	ret0, _ := ret[0].(provider.DNSServer)
	return ret0
}

// DNSServer indicates an expected call of DNSServer.
func (mr *MockInterfaceMockRecorder) DNSServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSServer", reflect.TypeOf((*MockInterface)(nil).DNSServer), arg0)
}

// DoTIP mocks base method.
func (m *MockInterface) DoTIP(arg0 provider.DoTServer, arg1 bool) net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTIP", arg0, arg1)
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// DoTIP indicates an expected call of DoTIP.
func (mr *MockInterfaceMockRecorder) DoTIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTIP", reflect.TypeOf((*MockInterface)(nil).DoTIP), arg0, arg1)
}

// DoTServer mocks base method.
func (m *MockInterface) DoTServer(arg0 []provider.DoTServer) provider.DoTServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTServer", arg0)
	ret0, _ := ret[0].(provider.DoTServer)
	return ret0
}

// DoTServer indicates an expected call of DoTServer.
func (mr *MockInterfaceMockRecorder) DoTServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTServer", reflect.TypeOf((*MockInterface)(nil).DoTServer), arg0)
}

// IP mocks base method.
func (m *MockInterface) IP(arg0 []net.IP) net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP", arg0)
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP.
func (mr *MockInterfaceMockRecorder) IP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockInterface)(nil).IP), arg0)
}
