// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/middlewares/log/logger (interfaces: Interface)

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Interface interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0)
}

// LogRequest mocks base method.
func (m *MockLogger) LogRequest(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRequest", arg0)
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockLoggerMockRecorder) LogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockLogger)(nil).LogRequest), arg0)
}

// LogRequestResponse mocks base method.
func (m *MockLogger) LogRequestResponse(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRequestResponse", arg0)
}

// LogRequestResponse indicates an expected call of LogRequestResponse.
func (mr *MockLoggerMockRecorder) LogRequestResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequestResponse", reflect.TypeOf((*MockLogger)(nil).LogRequestResponse), arg0)
}

// LogResponse mocks base method.
func (m *MockLogger) LogResponse(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogResponse", arg0)
}

// LogResponse indicates an expected call of LogResponse.
func (mr *MockLoggerMockRecorder) LogResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogResponse", reflect.TypeOf((*MockLogger)(nil).LogResponse), arg0)
}
