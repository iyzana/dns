// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/doh/metrics (interfaces: Interface)

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AnswersInc mocks base method.
func (m *MockInterface) AnswersInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnswersInc", arg0, arg1)
}

// AnswersInc indicates an expected call of AnswersInc.
func (mr *MockInterfaceMockRecorder) AnswersInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswersInc", reflect.TypeOf((*MockInterface)(nil).AnswersInc), arg0, arg1)
}

// DNSDialAddressInc mocks base method.
func (m *MockInterface) DNSDialAddressInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DNSDialAddressInc", arg0, arg1)
}

// DNSDialAddressInc indicates an expected call of DNSDialAddressInc.
func (mr *MockInterfaceMockRecorder) DNSDialAddressInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSDialAddressInc", reflect.TypeOf((*MockInterface)(nil).DNSDialAddressInc), arg0, arg1)
}

// DNSDialProviderInc mocks base method.
func (m *MockInterface) DNSDialProviderInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DNSDialProviderInc", arg0, arg1)
}

// DNSDialProviderInc indicates an expected call of DNSDialProviderInc.
func (mr *MockInterfaceMockRecorder) DNSDialProviderInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSDialProviderInc", reflect.TypeOf((*MockInterface)(nil).DNSDialProviderInc), arg0, arg1)
}

// DoHDialURLInc mocks base method.
func (m *MockInterface) DoHDialURLInc(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoHDialURLInc", arg0)
}

// DoHDialURLInc indicates an expected call of DoHDialURLInc.
func (mr *MockInterfaceMockRecorder) DoHDialURLInc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHDialURLInc", reflect.TypeOf((*MockInterface)(nil).DoHDialURLInc), arg0)
}

// DoTDialAddressInc mocks base method.
func (m *MockInterface) DoTDialAddressInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoTDialAddressInc", arg0, arg1)
}

// DoTDialAddressInc indicates an expected call of DoTDialAddressInc.
func (mr *MockInterfaceMockRecorder) DoTDialAddressInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTDialAddressInc", reflect.TypeOf((*MockInterface)(nil).DoTDialAddressInc), arg0, arg1)
}

// DoTDialProviderInc mocks base method.
func (m *MockInterface) DoTDialProviderInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoTDialProviderInc", arg0, arg1)
}

// DoTDialProviderInc indicates an expected call of DoTDialProviderInc.
func (mr *MockInterfaceMockRecorder) DoTDialProviderInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTDialProviderInc", reflect.TypeOf((*MockInterface)(nil).DoTDialProviderInc), arg0, arg1)
}

// InFlightRequestsDec mocks base method.
func (m *MockInterface) InFlightRequestsDec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsDec")
}

// InFlightRequestsDec indicates an expected call of InFlightRequestsDec.
func (mr *MockInterfaceMockRecorder) InFlightRequestsDec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsDec", reflect.TypeOf((*MockInterface)(nil).InFlightRequestsDec))
}

// InFlightRequestsInc mocks base method.
func (m *MockInterface) InFlightRequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsInc")
}

// InFlightRequestsInc indicates an expected call of InFlightRequestsInc.
func (mr *MockInterfaceMockRecorder) InFlightRequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsInc", reflect.TypeOf((*MockInterface)(nil).InFlightRequestsInc))
}

// QuestionsInc mocks base method.
func (m *MockInterface) QuestionsInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QuestionsInc", arg0, arg1)
}

// QuestionsInc indicates an expected call of QuestionsInc.
func (mr *MockInterfaceMockRecorder) QuestionsInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionsInc", reflect.TypeOf((*MockInterface)(nil).QuestionsInc), arg0, arg1)
}

// RcodeInc mocks base method.
func (m *MockInterface) RcodeInc(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RcodeInc", arg0)
}

// RcodeInc indicates an expected call of RcodeInc.
func (mr *MockInterfaceMockRecorder) RcodeInc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RcodeInc", reflect.TypeOf((*MockInterface)(nil).RcodeInc), arg0)
}

// RequestsInc mocks base method.
func (m *MockInterface) RequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestsInc")
}

// RequestsInc indicates an expected call of RequestsInc.
func (mr *MockInterfaceMockRecorder) RequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsInc", reflect.TypeOf((*MockInterface)(nil).RequestsInc))
}

// ResponsesInc mocks base method.
func (m *MockInterface) ResponsesInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponsesInc")
}

// ResponsesInc indicates an expected call of ResponsesInc.
func (mr *MockInterfaceMockRecorder) ResponsesInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesInc", reflect.TypeOf((*MockInterface)(nil).ResponsesInc))
}
