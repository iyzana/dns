// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/cache/metrics (interfaces: Interface)

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CacheExpiredInc mocks base method.
func (m *MockInterface) CacheExpiredInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheExpiredInc")
}

// CacheExpiredInc indicates an expected call of CacheExpiredInc.
func (mr *MockInterfaceMockRecorder) CacheExpiredInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheExpiredInc", reflect.TypeOf((*MockInterface)(nil).CacheExpiredInc))
}

// CacheGetEmptyInc mocks base method.
func (m *MockInterface) CacheGetEmptyInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheGetEmptyInc")
}

// CacheGetEmptyInc indicates an expected call of CacheGetEmptyInc.
func (mr *MockInterfaceMockRecorder) CacheGetEmptyInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGetEmptyInc", reflect.TypeOf((*MockInterface)(nil).CacheGetEmptyInc))
}

// CacheHitInc mocks base method.
func (m *MockInterface) CacheHitInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheHitInc")
}

// CacheHitInc indicates an expected call of CacheHitInc.
func (mr *MockInterfaceMockRecorder) CacheHitInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheHitInc", reflect.TypeOf((*MockInterface)(nil).CacheHitInc))
}

// CacheInsertEmptyInc mocks base method.
func (m *MockInterface) CacheInsertEmptyInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheInsertEmptyInc")
}

// CacheInsertEmptyInc indicates an expected call of CacheInsertEmptyInc.
func (mr *MockInterfaceMockRecorder) CacheInsertEmptyInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheInsertEmptyInc", reflect.TypeOf((*MockInterface)(nil).CacheInsertEmptyInc))
}

// CacheInsertInc mocks base method.
func (m *MockInterface) CacheInsertInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheInsertInc")
}

// CacheInsertInc indicates an expected call of CacheInsertInc.
func (mr *MockInterfaceMockRecorder) CacheInsertInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheInsertInc", reflect.TypeOf((*MockInterface)(nil).CacheInsertInc))
}

// CacheMaxEntriesSet mocks base method.
func (m *MockInterface) CacheMaxEntriesSet(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheMaxEntriesSet", arg0)
}

// CacheMaxEntriesSet indicates an expected call of CacheMaxEntriesSet.
func (mr *MockInterfaceMockRecorder) CacheMaxEntriesSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheMaxEntriesSet", reflect.TypeOf((*MockInterface)(nil).CacheMaxEntriesSet), arg0)
}

// CacheMissInc mocks base method.
func (m *MockInterface) CacheMissInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheMissInc")
}

// CacheMissInc indicates an expected call of CacheMissInc.
func (mr *MockInterfaceMockRecorder) CacheMissInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheMissInc", reflect.TypeOf((*MockInterface)(nil).CacheMissInc))
}

// CacheMoveInc mocks base method.
func (m *MockInterface) CacheMoveInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheMoveInc")
}

// CacheMoveInc indicates an expected call of CacheMoveInc.
func (mr *MockInterfaceMockRecorder) CacheMoveInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheMoveInc", reflect.TypeOf((*MockInterface)(nil).CacheMoveInc))
}

// CacheRemoveInc mocks base method.
func (m *MockInterface) CacheRemoveInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheRemoveInc")
}

// CacheRemoveInc indicates an expected call of CacheRemoveInc.
func (mr *MockInterfaceMockRecorder) CacheRemoveInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheRemoveInc", reflect.TypeOf((*MockInterface)(nil).CacheRemoveInc))
}

// SetCacheType mocks base method.
func (m *MockInterface) SetCacheType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCacheType", arg0)
}

// SetCacheType indicates an expected call of SetCacheType.
func (mr *MockInterfaceMockRecorder) SetCacheType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheType", reflect.TypeOf((*MockInterface)(nil).SetCacheType), arg0)
}
