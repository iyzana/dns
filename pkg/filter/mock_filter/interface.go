// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/filter (interfaces: Interface)

// Package mock_filter is a generated GoMock package.
package mock_filter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
	update "github.com/qdm12/dns/pkg/filter/update"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// FilterRequest mocks base method.
func (m *MockInterface) FilterRequest(arg0 *dns.Msg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FilterRequest indicates an expected call of FilterRequest.
func (mr *MockInterfaceMockRecorder) FilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRequest", reflect.TypeOf((*MockInterface)(nil).FilterRequest), arg0)
}

// FilterResponse mocks base method.
func (m *MockInterface) FilterResponse(arg0 *dns.Msg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterResponse", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FilterResponse indicates an expected call of FilterResponse.
func (mr *MockInterfaceMockRecorder) FilterResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterResponse", reflect.TypeOf((*MockInterface)(nil).FilterResponse), arg0)
}

// Update mocks base method.
func (m *MockInterface) Update(arg0 update.Settings) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterface)(nil).Update), arg0)
}
